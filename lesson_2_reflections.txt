What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository using git, a .git folder is created which stores meta data about the repository. Inititalizaing the repository allows you to start saving commits which is initially 0. Also files will have to be added to be tracked, git needs to know which files to commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an intermediate area which allows you to group files together to prepare for a commit. The staging area can contain some or all the files from the working directory and these are files which have not been added to the repository yet. This allows you flexibility in what files you decide to commit; you can change your mind and change the files which you want to commit.

How can you use the staging area to make sure you have one commit per logical
change?

You can use git diff with no arguments to see the difference between the staging area and the working directory, this will show you the change that is about to be committed into the repository. Then you can use git --staged to see the difference between the staging area and the most recent commit in the repository to help you verify the new commit for the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If you want to add an feature, then you could create a branch and make the necessary modifications, while keeping your master branch intact. The master branch is your production branch that always works. Branches also help share work between multiple people.

How do the diagrams help you visualize the branch structure?
The diagrams help me see that git commits can end up being non linear, and explains the concept of branching and reachability. Branching is when the path of storing commits is diverted from the master branch. Reachability is the concept that if you were to checkout a previous commit, and then commit from that point, it's possible that that commit can become unreachable and therefore lost because its not on a branch, so it's important to be aware of where to create commits, and when to create branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging 2 branches together is first a new commit is created which is the tip of both the branches, which contains the combined changes from both branches' latest commit. Then this commit, which is the tip of the merged branch points to all the previous commits from both branches which is sorted by timestamp.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually? 

Manual merging allows you to verify what changes you want from both branches as opposed to having git arbitrarily make that decision for you.